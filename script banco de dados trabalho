create table paciente(
	id_paciente serial,
	codigo_paciente varchar (100),
	nome_paciente varchar (100),
	idade integer,
	constraint paciente_pkey primary key (id_paciente)
)

insert into paciente (codigo_paciente, nome_paciente, idade) values ('p1', 'João', '20')
insert into paciente (codigo_paciente, nome_paciente, idade) values ('p2', 'Maria', '21')
insert into paciente (codigo_paciente, nome_paciente, idade) values ('p3', 'Pedro', '22')
insert into paciente (codigo_paciente, nome_paciente, idade) values ('p4', 'Débora', '23')

select * from paciente

create table medico(
	id_medico serial,
	crm varchar (100),
	nome_medico varchar (100),
	especialidade varchar (100),
	constraint medico_pkey primary key (id_medico)
)

insert into medico (crm, nome_medico, especialidade) values ('m1', 'Marcos', 'Oftalmologista')
insert into medico (crm, nome_medico, especialidade) values ('m2', 'Tereza', 'Clínico Geral')
insert into medico (crm, nome_medico, especialidade) values ('m3', 'Paulo', 'Pediatra')
insert into medico (crm, nome_medico, especialidade) values ('m4', 'João', 'Clínico Geral')

select * from medico

create table atende(
	id_atende serial,
	id_paciente integer,
	id_medico integer,
	data_atendimento date,
	constraint atende_pkey primary key (id_atende),
	constraint paciente_fkey foreign key (id_paciente) references paciente (id_paciente),
	constraint medico_fkey foreign key (id_medico) references medico (id_medico)
)

insert into atende (id_paciente, id_medico, data_atendimento) values ('1', '2', '09/02/2008')
insert into atende (id_paciente, id_medico, data_atendimento) values ('2', '1', '26/03/2006')
insert into atende (id_paciente, id_medico, data_atendimento) values ('3', '3', '11/09/2003')
insert into atende (id_paciente, id_medico, data_atendimento) values ('1', '4', '13/10/2007')
insert into atende (id_paciente, id_medico, data_atendimento) values ('2', '2', '08/05/2008')

select * from atende

create table cirurgia(
	id_cirurgia serial,
	codigo_cirurgia varchar (100),
	data_cirurgia date,
	descricao_cirurgia varchar (100),
	id_paciente integer,
	constraint cirurgia_pkey primary key (id_cirurgia),
	constraint paciente_fkey foreign key (id_paciente) references paciente (id_paciente)	
)

insert into cirurgia (codigo_cirurgia, data_cirurgia, descricao_cirurgia, id_paciente) values ('c1', '25/07/2008', 'Apendicite', '1')
insert into cirurgia (codigo_cirurgia, data_cirurgia, descricao_cirurgia, id_paciente) values ('c2', '07/02/2001', 'Retirada de cálculo renal', '2')
insert into cirurgia (codigo_cirurgia, data_cirurgia, descricao_cirurgia, id_paciente) values ('c3', '14/11/2007', 'Unha encravada', '3')
insert into cirurgia (codigo_cirurgia, data_cirurgia, descricao_cirurgia, id_paciente) values ('c4', '23/01/2008', 'Implante de silicone', '2')

select * from cirurgia

-- 2 - Implemente uma função que informados o código do paciente, a data da cirurgia e a
-- descrição do procedimento cirúrgico, crie uma nova cirurgia. É importante verificar a
-- existência do paciente e para aqueles que não existirem, deve ser gerado um erro com 
-- RAISE e abortar a função.

-- 3 - O desempenho dos médicos é auferido pela quantidade de atendimento que fazem por período. 
-- Assim, desenvolva uma função que informadas as datas inicial e final dos atendimentos, retorne 
-- o nome do médico e a quantidade de atendimento que realizou no período. Retorne tudo isso em 
-- forma de registro (returns setof record). Caso o período não retorne nenhuma consulta, deve ser 
-- gerado um erro com RAISE e abortar a função. Exemplo: se você colocou as datas 01/01/2003 a 31/12/2006, 
-- vai retornar Paulo 1; Marcos 1.

-- 4 -  É importante realizar verificações de regras de negócio no momento em que dados são 
-- alterados ou inseridos. Desta forma, desenvolva um trigger que verifique, no momento em que
-- uma cirurgia for inserida, se a data da cirurgia seja igual ou antes da data corrente. Se 
-- ela for maior, o trigger não pode deixar que a cirurgia seja inserida.

